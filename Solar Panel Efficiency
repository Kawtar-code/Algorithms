#this algorithm will predict solar panel efficiency

#import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Load the data
from google.colab import files
uploaded = files.upload()
df = pd.read_csv("solarpower.csv")
df.head(10)

#count the number of rows and columns
df.shape

#count the number of empty cells
df.isna().sum()

#import pandas as pd
df = pd.read_csv('solarpower.csv')
df.dropna(inplace = True)
print(df.to_string())

df.isna().sum()

df["Is Daylight"].value_counts()

#Visualize count
sns.countplot(df["Is Daylight"], label="count")

df.iloc[:,1:16].corr()

plt.figure(figsize=(10,10))
sns.heatmap(df.iloc[:,1:16].corr(), annot=True, fmt=".0%")

X = df.iloc[:,1:16].values
Y = df.iloc[:,1].values
type(X)

#split the data, 75% training, 25% testing
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25 , random_state = 0)

#Scale the data (feature scaling)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

# Create a function for the models
 def models(X_train, Y_train):

  #Logistic Regression
  from sklearn.linear_model import LogisticRegression
  log = LogisticRegression(random_state=0)
  log.fit(X_train, Y_train)

  #Decision tree
  from sklearn.tree import DecisionTreeClassifier
  tree = DecisionTreeClassifier(criterion = 'entropy', random_state=0)
  tree.fit(X_train, Y_train)

  #Random Forest Classifier
  from sklearn.ensemble import RandomForestClassifier
  forest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
  forest.fit(X_train, Y_train)

  #Print the models accuracy on the training data
  print('[0]Logistic Regression Training Accuracy:', log.score(X_train, Y_train))
  print('[1]Decision Tree Classifier Training Accuracy:', tree.score(X_train, Y_train))
  print('[2]Random Forest Classifier Training Accuracy:', forest.score(X_train, Y_train))
  return log, tree, forest

pred = model[0].predict(X_test)
print(pred)
print()
print(Y_test)
